;
; CA296 Console Template
; Version 1
;

;
; Preamble
;

.586
.model flat,stdcall
.stack 4096
option casemap:none

include     p:\masm32\include\windows.inc
include     p:\masm32\include\kernel32.inc
include		p:\masm32\include\user32.inc
include		p:\masm32\include\msvcrt.inc
include		p:\masm32\include\ca296.inc

includelib p:\masm32\lib\ca296.lib
includelib kernel32.lib
includelib user32.lib
includelib msvcrt.lib


;
; Data & Code
;
EXTERNDEF ascend:near
.data
len = 5
x			DWORD	4,5,3,6,1

.code
	main:nop

		push offset x		;ebp + 12
		push len			;ebp + 8

		call ascend
		invoke writeArray, addr x, len

		invoke Sleep, 500000
		invoke ExitProcess,0

	end main

;function -

.586
.model flat,stdcall
.stack 4096


EXTERNDEF	ascend:near
.data
i	DWORD -1
j	DWORD 0
i_fin	DWORD	0
.code
	ascend:
		push ebp									;[ebp + 4]
		mov ebp, esp
		;sub esp, 8
		
		mov eax, 0
		mov edx, [ebp + 8]							;len
		
		mov eax, edx
		sub eax, 2
		mov i_fin, eax

		loopy:										;def loopy():
			mov eax, i_fin
			cmp i, eax								;	if i < len-2:
			jg done
			inc i
			mov eax, i
			mov j, eax								;	j = i
			inc j
			 
		find_element:								;	def find_element():			#swaps elements
			mov edx, [ebp + 8]						;		edx = len
			cmp j, edx								;		if j == len:
			je loopy								;			loopy()
					
			mov eax, i								;		eax = i	
			sal eax, 2
			add eax, [ebp + 12]						;		[eax] is a[i]

			mov ebx, j								;		ebx = 	j
			sal ebx, 2
			add ebx, [ebp + 12]						;		[ebx] is a[j]	
				
			mov ecx, [ebx]			
			cmp [eax], ecx							;		if a[i] > a[j]
			jg swap									;			swap()	
			inc j
			jmp find_element

		swap:
			mov edx, [eax]							;	tmp = a[i]
			mov ecx, [ebx]
			mov [eax], ecx							;	a[i] = a[j]	
			mov [ebx], edx							;	a[j] = tmp
			inc j
			jmp find_element

	done:
		mov esp, ebp
		pop ebp
		ret 8	
end
