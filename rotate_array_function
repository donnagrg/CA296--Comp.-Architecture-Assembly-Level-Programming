;
; CA296 Console Template
; Version 1
;

;
; Preamble
;

.586
.model flat,stdcall
.stack 4096
option casemap:none

include     p:\masm32\include\windows.inc
include     p:\masm32\include\kernel32.inc
include		p:\masm32\include\user32.inc
include		p:\masm32\include\msvcrt.inc
include		p:\masm32\include\ca296.inc

includelib p:\masm32\lib\ca296.lib
includelib kernel32.lib
includelib user32.lib
includelib msvcrt.lib


;
; Data & Code
;
EXTERNDEF rotate:near

len = 5
.data
a		DWORD	10,-10,2,5,-6
indx		DWORD	3	
.code
	main:nop

		invoke version
		push offset a		;[ebp + 16]
		push len			;[ebp + 12]
		push indx			;[ebp + 8]

		call rotate
		invoke writeArray, addr a, len
		invoke Sleep, 50000

		invoke ExitProcess,0

	end main

;function
.586
.model flat,stdcall
.stack 4096


EXTERNDEF rotate:near
.code

	rotate:
		push ebp
		mov ebp, esp
		sub esp, 16

		mov eax, 0
		mov [ebp - 4], eax			;i = 0
		mov eax, 1
		mov [ebp - 8], eax			;j = 1
		mov [ebp - 12], eax			;first_val = 0	
		mov eax, [ebp + 8]
		mov [ebp - 16], eax		
	loopy:
		dec DWORD ptr [ebp - 16]			;indx -= 1
		mov eax, [ebp - 16]					;
		cmp eax, 0							;if indx < 0
		jl done								;done()	
		
		mov eax, [ebp + 16]					;eax = offset a
		mov ebx, [eax]						;ebx = a[0]
		mov [ebp - 12], ebx					;first_val = a[0]	
	loopy2:
		mov ebx, [ebp - 8]					;ebx = j
		cmp ebx, [ebp + 12]					;if j == len
		je last_elem						;last_elem()	

		mov eax, [ebp - 4]					;eax = i
		sal eax, 2							;i = i * 4
		add eax, [ebp + 16]					;j = j + offset a

		sal ebx, 2							;j = j * 4
		add ebx, [ebp + 16]					;j = j + offset a
		mov ecx, [ebx]						;ecx = a[j]
		mov [eax], ecx						;a[i] = a[j]

	inc DWORD ptr [ebp - 4]					; i += 1	
	inc DWORD ptr [ebp - 8]					; j += 1
	jmp loopy2								; loopy2()
	
	last_elem:								;def last_elem():
		
		mov eax, [ebp + 12]					;eax= len
		dec eax								; eax -= 1
		sal eax, 2							;eax = eax * 4
		add eax, [ebp + 16]					;eax = eax + offset a	
		mov ebx, [ebp - 12]					;ebx = first_val
		mov [eax], ebx						;a[len - 1] = ebx
		
		mov eax, 0							;eax = 0
		mov [ebp - 4], eax					;i = 0
		mov eax, 1							;eax = 1		
		mov [ebp - 8], eax					;j = 1	
		jmp loopy							;loopy()
	done:									;def done():
		mov esp,ebp
		pop ebp
		ret 12
end
